#!/usr/bin/env python3
"""
Simple Flask app for deployment with gunicorn
"""
import os
import logging
import requests
import json
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from werkzeug.utils import secure_filename

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create Flask app
app = Flask(__name__, template_folder='templates', static_folder='static')
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-me")

def load_real_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    all_users = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users_data.json (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞)
    try:
        with open("users_data.json", "r", encoding="utf-8") as f:
            bot_users = json.load(f)
            all_users.update(bot_users)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å users_data.json: {e}")
        bot_users = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data/users.json (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try:
        with open("data/users.json", "r", encoding="utf-8") as f:
            old_users = json.load(f)
            for user_id, user_data in old_users.items():
                if user_id not in all_users:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
                    all_users[user_id] = {
                        "registered": user_data.get("registration_date", "2025-07-24T00:00:00"),
                        "age_group": "–ù–µ –≤—ã–±—Ä–∞–Ω",  # –í —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å
                        "trial_started": user_data.get("last_activity", "2025-07-24T00:00:00"),
                        "trial_used": user_data.get("subscription_status") == "active",
                        "subscription": "active" if user_data.get("subscription_status") == "active" else None,
                        "last_task_date": user_data.get("last_activity", "")[:10],
                        "current_day": user_data.get("tasks_completed", 0),
                        "username": user_data.get("username", "")
                    }
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å data/users.json: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ analytics
    try:
        with open("data/analytics.json", "r", encoding="utf-8") as f:
            analytics = json.load(f)
            for user_id, user_data in analytics.get("user_registrations", {}).items():
                if user_id not in all_users:
                    all_users[user_id] = {
                        "registered": user_data.get("registration_date", "2025-07-24T00:00:00"),
                        "age_group": "–ù–µ –≤—ã–±—Ä–∞–Ω",
                        "trial_started": user_data.get("registration_date", "2025-07-24T00:00:00"),
                        "trial_used": user_data.get("completed_registration", False),
                        "subscription": None,
                        "last_task_date": "",
                        "current_day": 0,
                        "username": user_data.get("username", "")
                    }
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å analytics.json: {e}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'total_users': len(all_users),
        'trial_users': 0,
        'monthly_subscribers': 0,
        'lifetime_subscribers': 0,
        'promocode_users': 0,
        'total_payments': 0,
        'monthly_revenue': 0,
        'lifetime_revenue': 0
    }
    
    users_list = []
    
    for user_id, user_data in all_users.items():
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_data.get("trial_used"):
            stats['trial_users'] += 1
            
        subscription = user_data.get("subscription")
        if subscription == "monthly":
            stats['monthly_subscribers'] += 1
            stats['monthly_revenue'] += 150
            stats['total_payments'] += 150
        elif subscription == "lifetime":
            stats['lifetime_subscribers'] += 1
            stats['lifetime_revenue'] += 500
            stats['total_payments'] += 500
        elif subscription == "promocode":
            stats['promocode_users'] += 1
        elif subscription == "active":
            stats['trial_users'] += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        username = user_data.get("username", f"user_{user_id[-4:]}")
        users_list.append({
            'user_id': user_id,
            'username': username if username else f"user_{user_id[-4:]}",
            'registration_date': user_data.get("registered", "2025-07-27T00:00:00"),
            'age_group': user_data.get("age_group", "–ù–µ –≤—ã–±—Ä–∞–Ω"),
            'subscription_status': subscription or ("trial" if user_data.get("trial_used") else "new"),
            'trial_started': user_data.get("trial_started"),
            'last_task_date': user_data.get("last_task_date"),
            'tasks_completed': user_data.get("current_day", 0),
            'tasks_viewed': user_data.get("current_day", 0) + 1 if user_data.get("trial_used") else 0,
            'last_activity': user_data.get("trial_started", user_data.get("registered", "2025-07-27T00:00:00")),
            'level': get_user_level(user_data.get("current_day", 0))
        })
    
    return stats, users_list

def get_user_level(tasks_completed):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if tasks_completed == 0:
        return "–ù–æ–≤–∏—á–æ–∫"
    elif tasks_completed < 7:
        return "–ü—Ä–æ–±–Ω–∏–∫"
    elif tasks_completed < 30:
        return "–ê–∫—Ç–∏–≤–Ω—ã–π"
    else:
        return "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
REAL_STATS, REAL_USERS = load_real_user_data()

MOCK_TASK_STATS = {
    '9-14 –º–µ—Å': {'total': 1, 'with_images': 0, 'with_videos': 0},
    '15-19 –º–µ—Å': {'total': 1, 'with_images': 0, 'with_videos': 0}
}

MOCK_TASKS = [
    {
        'id': 1,
        'title': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ 9-14 –º–µ—Å—è—Ü–µ–≤ - –î–µ–Ω—å 1',
        'description': 'üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 9-14 –º–µ—Å—è—Ü–µ–≤:\n\nüß† **–í–Ω–∏–º–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ (—Å–ª—É—Ö):**\n¬´–ß—Ç–æ –∑–∞ –∑–≤—É–∫?¬ª ‚Äî –±–µ—Ä—ë–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –∫—Ä—ã—à–∫—É, –ø–ª–∞—Å—Ç–∏–∫–æ–≤—É—é –∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—É—é –ª–æ–∂–∫—É. –ü–æ—Å—Ç—É—á–∏—Ç–µ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º: —Å—Ç–æ–ª, –ø–æ–ª, –∫–æ—Ä–æ–±–∫–∞. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:\n¬´–ó–≤–µ–Ω–∏—Ç!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –∫—Ä—ã—à–∫–µ),\n¬´–ì–ª—É—Ö–æ!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –¥–∏–≤–∞–Ω—É),\n¬´–°—Ç—É–∫-—Å—Ç—É–∫!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –ø–æ–ª—É).\n‚û°Ô∏è –ü–æ–±—É–∂–¥–∞–µ–º –º–∞–ª—ã—à–∞ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å –∑–≤—É–∫–∏.\n\nü§∏ **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n¬´–°–æ–±–µ—Ä–∏ –∑–≤–µ—Ä–µ–π¬ª ‚Äî —Ä–∞–∑–ª–æ–∂–∏—Ç–µ –º—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏ –∑–º–µ–π–∫–æ–π. –ì–æ–≤–æ—Ä–∏—Ç–µ: ¬´–í–æ—Ç –ª–∏—Å–∏—á–∫–∞! –ê –≤–æ—Ç –∑–∞–π–∫–∞!¬ª ‚Äî –º–∞–ª—ã—à –ø–æ–ª–∑—ë—Ç –∏–ª–∏ –∏–¥—ë—Ç –ø–æ –º–∞—Ä—à—Ä—É—Ç—É, —Å–æ–±–∏—Ä–∞—è –∏—Ö –≤ –∫–æ—Ä–æ–±–∫—É.\n‚û°Ô∏è –£–∫—Ä–µ–ø–ª—è–µ–º –º–æ—Ç–æ—Ä–∏–∫—É, –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–≤.\n\nüó£Ô∏è **–ü—Ä–µ–¥—Ä–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n¬´–ú—è—á –∏ –∑–≤—É–∫¬ª ‚Äî –æ—Ç–±–∏–≤–∞–π—Ç–µ –º—è—á–∏–∫ –æ—Ç –ø–æ–ª–∞ –∏–ª–∏ —Å—Ç–æ–ª–∞ –∏ —Ä–∏—Ç–º–∏—á–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ:\n¬´–ë—É—Ö¬ª ‚Üí –æ—Ç—Å–∫–æ–∫,\n¬´–ë—É—Ö¬ª ‚Üí –æ—Ç—Å–∫–æ–∫,\n‚û°Ô∏è –ü–æ–±—É–∂–¥–∞–µ–º –º–∞–ª—ã—à–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∏ –ø–æ–æ—â—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏.\n\nüòä **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n¬´–ì—Ä—É—Å—Ç—å ‚Äî —Ä–∞–¥–æ—Å—Ç—å¬ª ‚Äî —Å –º—è–≥–∫–æ–π –∏–≥—Ä—É—à–∫–æ–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-—Å—Ü–µ–Ω–∫–∏:\n¬´–û–π-–æ–π, –∑–∞–π–∫–∞ —É–ø–∞–ª‚Ä¶¬ª (–≥—Ä—É—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å)\n‚Üí ¬´–£—Ä–∞! –ó–∞–π–∫–∞ –≤—Å—Ç–∞–ª!¬ª (–≤–µ—Å—ë–ª—ã–π –≥–æ–ª–æ—Å, —Ö–ª–æ–ø–∞–µ–º –≤ –ª–∞–¥–æ—à–∏)\n‚û°Ô∏è –ü–æ–º–æ–≥–∞–µ–º —Ä–µ–±—ë–Ω–∫—É —Ä–∞–∑–ª–∏—á–∞—Ç—å —ç–º–æ—Ü–∏–∏, —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, –ø–æ–¥—Ä–∞–∂–∞—Ç—å.\n\n‚úã **–¢–∞–∫—Ç–∏–ª—å–Ω–æ–µ/–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n¬´–ú—è–≥–∫–æ –∏–ª–∏ –∂—ë—Å—Ç–∫–æ¬ª ‚Äî –≤ –æ–¥–Ω–æ–π –º–∏—Å–∫–µ –ø–æ–ª–æ–∂–∏—Ç–µ –≤–∞—Ç—É, —Ç—Ä—è–ø–æ—á–∫—É, –ø–æ–º–ø–æ–Ω. –í –¥—Ä—É–≥–æ–π ‚Äî –ª–æ–∂–∫—É, –ø—É–≥–æ–≤–∏—Ü—ã, –∫—Ä—ã—à–∫—É. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –º–∞–ª—ã—à—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–æ–≥–∞—Ç—å –∏ –Ω–∞–∑—ã–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏—è:\n¬´–ú—è–≥–∫–æ!¬ª ‚Äî (—Ç—Ä–æ–≥–∞–µ—Ç –≤–∞—Ç—É),\n¬´–¢–≤—ë—Ä–¥–æ!¬ª ‚Äî (—Ç—Ä–æ–≥–∞–µ—Ç –ª–æ–∂–∫—É).\n‚û°Ô∏è –†–∞–∑–≤–∏–≤–∞–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–ª–æ–≤–∞—Ä—å.\n\nüí° –°–æ–≤–µ—Ç: –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–æ –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞–π—Ç–µ. –ï—Å–ª–∏ –º–∞–ª—ã—à –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n‚ú® –•–≤–∞–ª–∏—Ç–µ –∑–∞ –ª—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏!\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º! üåô',
        'age_group': '9-14 –º–µ—Å',
        'day_number': 1,
        'image_url': None,
        'video_url': None
    },
    {
        'id': 2,
        'title': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ 15-19 –º–µ—Å—è—Ü–µ–≤ - –î–µ–Ω—å 1',
        'description': 'üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 15-19 –º–µ—Å—è—Ü–µ–≤:\n\nüß† **–í–Ω–∏–º–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ:**\n–ò–≥—Ä–∞ ¬´–ü–æ–∫–∞–∂–∏ –∏ –Ω–∞–∑–æ–≤–∏¬ª ‚Äî —Ä–∞–∑–ª–æ–∂–∏—Ç–µ –ø–µ—Ä–µ–¥ —Ä–µ–±—ë–Ω–∫–æ–º 4‚Äì5 –∑–Ω–∞–∫–æ–º—ã—Ö –∏–≥—Ä—É—à–µ–∫. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ: ¬´–ì–¥–µ –º–∞—à–∏–Ω–∫–∞?¬ª, ¬´–ü–æ–∫–∞–∂–∏ –º–∏—à–∫—É¬ª, ¬´–ê –≥–¥–µ –ª–æ—à–∞–¥–∫–∞?¬ª ‚Äî –ø–æ–æ—â—Ä—è–π—Ç–µ, –µ—Å–ª–∏ –º–∞–ª—ã—à —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\nü§∏ **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n–ò–≥—Ä–∞ —Å –º—è—á–æ–º ‚Äî –∫–∞—Ç–∞–π—Ç–µ –º—è—á–∏–∫ –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ü—Ä–∏ —ç—Ç–æ–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–æ–≤–∞–º–∏: ¬´–ö–∞—Ç–∏!¬ª, ¬´–ü–æ–π–º–∞–ª!¬ª, ¬´–ë—Ä–æ—Å–∞–π!¬ª ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≥–ª–∞–≥–æ–ª—ã –∏ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞.\n\nüó£Ô∏è **–ü—Ä–µ–¥—Ä–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n–ß–∏—Ç–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏—à–∫–∏, –¥–µ–ª–∞—è –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É–¥–∞—Ä–Ω—ã—Ö –∑–≤—É–∫–∞—Ö, —Ä–∏—Ç–º–µ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö:\n\n–ó–∞–π–∫–∞ –≤–∑—è–ª —Å–≤–æ–π –±–∞—Ä–∞–±–∞–Ω ‚Äî\n–ò —É–¥–∞—Ä–∏–ª: —Ç—Ä–∞–º-—Ç–∞–º-—Ç–∞–º!\n\n–ö—É-–∫—É, –∫—É-–∫—É, –∫—É–∫—É—à–µ—á–∫–∞,\n–õ–µ—Ç–∏ —Å–∫–æ—Ä–µ–π –≤ –ª–µ—Å–æ–∫.\n–ö—É-–∫—É, –∫—É-–∫—É, –∫—É–∫—É—à–µ—á–∫–∞,\n–ü–æ–¥–∞–π —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–∫!\n\n–¢—É–∫-—Ç—É–∫-—Ç—É–∫-—Ç—É–∫ ‚Äî\n–≠—Ç–æ —á—Ç–æ –∑–∞ —Å—Ç—É–∫?\n–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —ç—Ç–æ –∑–≤—É–∫:\n–¢—É–∫-—Ç—É–∫-—Ç—É–∫-—Ç—É–∫.\n\nüòä **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n¬´–ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏¬ª ‚Äî —Å—è–¥—å—Ç–µ —Å –º–∞–ª—ã—à–æ–º –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º –∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏–∑–æ–±—Ä–∞–∂–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏: —Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —É–¥–∏–≤–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞—Ö, –≤–µ—Å–µ–ª—å–µ. –ü–æ–±—É–∂–¥–∞–π—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –º–∏–º–∏–∫—É: ¬´–ê —Ç–µ–ø–µ—Ä—å –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –∏—Å–ø—É–≥–∞–ª—Å—è!¬ª\n\n‚úã **–¢–∞–∫—Ç–∏–ª—å–Ω–æ–µ/–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**\n¬´–ö–æ—Ä–∑–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä¬ª ‚Äî –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É —Ä–∞–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ (–º–µ—à–æ—á–µ–∫ —Å —Ñ–∞—Å–æ–ª—å—é, –∫—É—Å–æ—á–µ–∫ –≥—É–±–∫–∏, —Ñ–æ–ª—å–≥–∞, –º–µ—Ö, –±–∞—Ä—Ö–∞—Ç). –ü—É—Å—Ç—å –º–∞–ª—ã—à –æ—â—É–ø—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã, –∞ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –æ—â—É—â–µ–Ω–∏—è: ¬´–ú—è–≥–∫–∏–π¬ª, ¬´–®—É—Ä—à–∏—Ç¬ª, ¬´–ì–ª–∞–¥–∫–∏–π¬ª, ¬´–ö–æ–ª—é—á–∏–π¬ª.\n\nüí° –°–æ–≤–µ—Ç: –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–æ –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞–π—Ç–µ. –ï—Å–ª–∏ –º–∞–ª—ã—à –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n‚ú® –•–≤–∞–ª–∏—Ç–µ –∑–∞ –ª—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏!\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º! üåô',
        'age_group': '15-19 –º–µ—Å',
        'day_number': 1,
        'image_url': None,
        'video_url': None
    }
]

AGE_GROUPS = ['9-14 –º–µ—Å', '15-19 –º–µ—Å']

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è Telegram –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from telegram_analytics import create_telegram_exporter
    from analytics_scheduler import start_analytics_scheduler, stop_analytics_scheduler, get_scheduler_status
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
    telegram_exporter = create_telegram_exporter()
except ImportError as e:
    logger.warning(f"Telegram analytics modules not available: {e}")
    # Mock –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ Telegram —Ñ—É–Ω–∫—Ü–∏–π
    class MockTelegramExporter:
        def send_daily_analytics(self, stats, task_stats):
            logger.info("Mock: Daily analytics would be sent")
            return True
        def send_weekly_analytics(self, stats, task_stats):
            logger.info("Mock: Weekly analytics would be sent") 
            return True
    
    telegram_exporter = MockTelegramExporter()
    
    def start_analytics_scheduler(daily_time="09:00", weekly_day="monday", weekly_time="10:00"):
        logger.info("Mock: Analytics scheduler would start")
    
    def stop_analytics_scheduler():
        logger.info("Mock: Analytics scheduler would stop")
    
    def get_scheduler_status():
        return {'running': False, 'next_runs': []}

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats, users = load_real_user_data()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    task_stats = MOCK_TASK_STATS.copy()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    recent_users = sorted(users, key=lambda x: x['registration_date'], reverse=True)[:5]
    
    return render_template('dashboard.html', 
                          stats=stats, 
                          task_stats=task_stats,
                          recent_users=recent_users)

@app.route('/tasks')
def tasks_list():
    """List tasks with age filtering"""
    age_filter = request.args.get('age_group', 'all')
    
    if age_filter == 'all':
        filtered_tasks = MOCK_TASKS
    else:
        filtered_tasks = [t for t in MOCK_TASKS if t['age_group'] == age_filter]
    
    return render_template('tasks_list.html',
                           tasks=filtered_tasks,
                           age_groups=AGE_GROUPS,
                           current_filter=age_filter)

@app.route('/tasks/new', methods=['GET', 'POST'])
def new_task():
    """Create new task"""
    if request.method == 'POST':
        try:
            title = request.form.get('title')
            description = request.form.get('description')
            age_group = request.form.get('age_group')
            day_number = int(request.form.get('day_number', 1))
            
            if not all([title, description, age_group]):
                flash('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'error')
                return render_template('task_form.html', 
                                       age_groups=AGE_GROUPS,
                                       edit_mode=False,
                                       task={})
            
            # Simulate task creation
            new_task = {
                'id': len(MOCK_TASKS) + 1,
                'title': title,
                'description': description,
                'age_group': age_group,
                'day_number': day_number,
                'image_url': None,
                'video_url': None
            }
            MOCK_TASKS.append(new_task)
            
            flash(f'–ó–∞–¥–∞–Ω–∏–µ "{title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'success')
            return redirect(url_for('tasks_list'))
            
        except Exception as e:
            logger.error(f"Task creation error: {e}")
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}', 'error')
    
    return render_template('task_form.html',
                           age_groups=AGE_GROUPS,
                           edit_mode=False,
                           task={})

@app.route('/tasks/<int:task_id>/edit', methods=['GET', 'POST'])
def edit_task(task_id):
    """Edit existing task"""
    task = next((t for t in MOCK_TASKS if t['id'] == task_id), None)
    if not task:
        flash('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error')
        return redirect(url_for('tasks_list'))
    
    if request.method == 'POST':
        try:
            task['title'] = request.form.get('title')
            task['description'] = request.form.get('description')
            task['age_group'] = request.form.get('age_group')
            task['day_number'] = int(request.form.get('day_number', 1))
            
            flash(f'–ó–∞–¥–∞–Ω–∏–µ "{task["title"]}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success')
            return redirect(url_for('tasks_list'))
            
        except Exception as e:
            logger.error(f"Task edit error: {e}")
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}', 'error')
    
    return render_template('task_form.html',
                           age_groups=AGE_GROUPS,
                           edit_mode=True,
                           task=task)

@app.route('/tasks/<int:task_id>/delete', methods=['POST'])
def delete_task(task_id):
    """Delete task"""
    global MOCK_TASKS
    MOCK_TASKS = [t for t in MOCK_TASKS if t['id'] != task_id]
    flash('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success')
    return redirect(url_for('tasks_list'))

@app.route('/users')
def users():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats, users_list = load_real_user_data()
    
    return render_template('users.html', users=users_list)

@app.route('/analytics')
def analytics():
    """Analytics page"""
    engagement_stats = MOCK_STATS
    popular_tasks = MOCK_TASKS[:5]  # Top 5 tasks
    
    return render_template('analytics.html',
                           engagement_stats=engagement_stats,
                           popular_tasks=popular_tasks)

@app.route('/analytics/export-telegram', methods=['POST'])
def export_analytics_telegram():
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        success = telegram_exporter.send_daily_analytics(MOCK_STATS, MOCK_TASK_STATS)
        
        if success:
            flash('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Telegram –∫–∞–Ω–∞–ª!', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.', 'error')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}', 'error')
    
    return redirect(url_for('analytics'))

@app.route('/analytics/export-weekly', methods=['POST'])
def export_weekly_analytics():
    """–≠–∫—Å–ø–æ—Ä—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        success = telegram_exporter.send_weekly_analytics(MOCK_STATS, MOCK_TASK_STATS)
        
        if success:
            flash('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Telegram –∫–∞–Ω–∞–ª!', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.', 'error')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}', 'error')
    
    return redirect(url_for('analytics'))

@app.route('/analytics/schedule-export', methods=['POST'])
def schedule_analytics_export():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        export_time = request.form.get('export_time', '09:00')
        export_enabled = request.form.get('export_enabled') == 'on'
        weekly_day = request.form.get('weekly_day', 'monday')
        weekly_time = request.form.get('weekly_time', '10:00')
        
        if export_enabled:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            stop_analytics_scheduler()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            start_analytics_scheduler(
                daily_time=export_time,
                weekly_day=weekly_day,
                weekly_time=weekly_time
            )
            
            flash(f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {export_time}, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ {weekly_day} {weekly_time}', 'success')
        else:
            stop_analytics_scheduler()
            flash('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω', 'info')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        flash(f'–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}', 'error')
    
    return redirect(url_for('analytics'))

@app.route('/analytics/scheduler-status')
def scheduler_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        status = get_scheduler_status()
        return jsonify(status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/promocodes')
def promocodes():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    return render_template('promocodes.html')

@app.errorhandler(404)
def not_found(error):
    return render_template('base.html'), 404

@app.errorhandler(500)
def server_error(error):
    logger.error(f"Server error: {error}")
    flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error')
    return render_template('base.html'), 500

@app.route('/bot-status')
def bot_status():
    """–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å CMS"""
    try:
        with open("data/tasks.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            tasks_count = len(data.get("tasks", []))
        
        status = {
            "cms_tasks_count": tasks_count,
            "bot_integration": "active",
            "auto_delivery": "enabled",
            "delivery_time": "9:00 AM Moscow Time",
            "last_update": datetime.now().isoformat(),
            "message": f"–ë–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç {tasks_count} –∑–∞–¥–∞–Ω–∏–π –∏–∑ CMS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        }
        return jsonify(status)
    except Exception as e:
        return jsonify({
            "error": str(e),
            "bot_integration": "error",
            "last_update": datetime.now().isoformat()
        }), 500

# –ÆKassa webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@app.route('/webhook/yookassa', methods=['POST'])
def yookassa_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa"""
    try:
        import hmac
        import hashlib
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = request.get_data(as_text=True)
        data = json.loads(body)
        
        event_type = data.get('event')
        payment_object = data.get('object')
        
        if event_type == 'payment.succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            payment_id = payment_object.get('id')
            user_id = payment_object.get('metadata', {}).get('user_id')
            amount = float(payment_object.get('amount', {}).get('value', 0))
            
            logger.info(f"üéâ Webhook: –ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—É–º–º–∞ {amount}‚ÇΩ")
            
            if user_id:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try:
                    with open("users_data.json", "r", encoding="utf-8") as f:
                        users_data = json.load(f)
                except:
                    users_data = {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in users_data:
                    if amount == 150.0:
                        users_data[user_id]["subscription"] = "monthly"
                        users_data[user_id]["subscription_end"] = (datetime.now() + timedelta(days=30)).isoformat()
                        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}")
                    elif amount == 500.0:
                        users_data[user_id]["subscription"] = "lifetime"
                        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}")
                    
                    # –û—á–∏—â–∞–µ–º pending –ø–ª–∞—Ç–µ–∂
                    if "pending_payment" in users_data[user_id]:
                        del users_data[user_id]["pending_payment"]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    with open("users_data.json", "w", encoding="utf-8") as f:
                        json.dump(users_data, f, ensure_ascii=False, indent=2)
        
        elif event_type == 'payment.canceled':
            payment_id = payment_object.get('id')
            logger.info(f"‚ùå Webhook: –ø–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
        
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': 'Internal error'}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)