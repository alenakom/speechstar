#!/usr/bin/env python3
"""
Simple Flask app for Render - works without dependencies
"""
import os
import json
import logging
from flask import Flask, jsonify
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create Flask app
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "render-secret-key")

@app.route('/')
def index():
    """Main page"""
    return jsonify({
        "status": "success",
        "service": "SpeechStar Bot Web Panel",
        "timestamp": datetime.now().isoformat(),
        "message": "üåü –ë–æ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ—á–∏ –¥–µ—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "bot": "@SpeechStarBot",
        "description": "–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏ –¥–µ—Ç–µ–π 6-36 –º–µ—Å—è—Ü–µ–≤",
        "features": [
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º",
            "‚úÖ –ü–æ–¥–ø–∏—Å–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (150‚ÇΩ/–º–µ—Å, 500‚ÇΩ –Ω–∞–≤—Å–µ–≥–¥–∞)", 
            "‚úÖ –ÆKassa –ø–ª–∞—Ç–µ–∂–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ 9:00 –ú–°–ö",
            "‚úÖ 100 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        ],
        "age_groups": [
            "9-14 –º–µ—Å—è—Ü–µ–≤",
            "15-19 –º–µ—Å—è—Ü–µ–≤"
        ],
        "endpoints": {
            "health_check": "/health",
            "bot_info": "/bot",
            "user_stats": "/stats"
        }
    })

@app.route('/health')
def health():
    """Health check for monitoring"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "speechstar-web",
        "uptime": "24/7"
    })

@app.route('/bot')
def bot_info():
    """Telegram bot information"""
    return jsonify({
        "bot_name": "SpeechStar Bot",
        "bot_username": "@SpeechStarBot",
        "bot_id": "8371213145", 
        "description": "Telegram –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ—á–∏ –¥–µ—Ç–µ–π –æ—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 3 –ª–µ—Ç",
        "target_audience": "–†–æ–¥–∏—Ç–µ–ª–∏ —Å –¥–µ—Ç—å–º–∏ 6-36 –º–µ—Å—è—Ü–µ–≤",
        "personality": "–¢–µ–ø–ª–∞—è –º–∞–º–∞, –¥–µ–ª—è—â–∞—è—Å—è –æ–ø—ã—Ç–æ–º",
        "subscription_model": {
            "trial": "7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
            "monthly": "150‚ÇΩ/–º–µ—Å—è—Ü",
            "lifetime": "500‚ÇΩ –Ω–∞–≤—Å–µ–≥–¥–∞"
        },
        "features": {
            "daily_tasks": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ 9:00 –ú–°–ö",
            "age_groups": 2,
            "payment_system": "–ÆKassa",
            "promocodes": 100,
            "auto_scheduling": true
        }
    })

@app.route('/stats')
def stats():
    """User statistics"""
    try:
        # Try to load real user data if exists
        with open("users_data.json", "r", encoding="utf-8") as f:
            users = json.load(f)
            total_users = len(users)
            active_users = len([u for u in users.values() if u.get('subscription')])
    except FileNotFoundError:
        total_users = 0
        active_users = 0
        
    return jsonify({
        "total_users": total_users,
        "active_subscriptions": active_users,
        "service_status": "running",
        "deployment": "render.com",
        "timestamp": datetime.now().isoformat(),
        "message": f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    })

@app.route('/webhook/yookassa', methods=['POST'])
def yookassa_webhook():
    """Simple webhook handler"""
    return jsonify({"status": "webhook_received", "timestamp": datetime.now().isoformat()})

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "error": "Page not found",
        "message": "–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        "available_endpoints": ["/", "/health", "/bot", "/stats"]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Server error: {error}")
    return jsonify({
        "error": "Internal server error",
        "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Starting SpeechStar web service on port {port}")
    logger.info(f"üåê Service will be available at https://speechstar.onrender.com")
    app.run(host='0.0.0.0', port=port, debug=False)
