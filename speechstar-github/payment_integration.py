#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import hashlib
import uuid
import requests
from datetime import datetime

class YookassaPayment:
    def __init__(self, shop_id, secret_key):
        self.shop_id = shop_id
        self.secret_key = secret_key
        self.api_url = "https://api.yookassa.ru/v3"
    
    def create_payment(self, amount, description, user_id, return_url=None):
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂"""
        import base64
        auth_string = f"{self.shop_id}:{self.secret_key}"
        encoded_auth = base64.b64encode(auth_string.encode()).decode('ascii')
        
        headers = {
            "Authorization": f"Basic {encoded_auth}",
            "Content-Type": "application/json",
            "Idempotence-Key": str(uuid.uuid4())
        }
        
        payment_data = {
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "description": description,
            "metadata": {
                "user_id": str(user_id)
            },
            "confirmation": {
                "type": "redirect",
                "return_url": return_url or "https://example.com/return"
            },
            "capture": True
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/payments",
                json=payment_data,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ÆKassa: {e}")
            return None
    
    def check_payment_status(self, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        import base64
        auth_string = f"{self.shop_id}:{self.secret_key}"
        encoded_auth = base64.b64encode(auth_string.encode()).decode('ascii')
        
        headers = {
            "Authorization": f"Basic {encoded_auth}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(
                f"{self.api_url}/payments/{payment_id}",
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ:
"""
# –í new_bot.py –¥–æ–±–∞–≤–∏—Ç—å:

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    payment_service = YookassaPayment(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
else:
    payment_service = None

@dp.callback_query(F.data == "pay_monthly")
async def pay_monthly(callback: types.CallbackQuery):
    if not payment_service:
        await callback.answer("–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    user_id = callback.from_user.id
    payment = payment_service.create_payment(
        amount=150.0,
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - —Ä–µ—á–µ–≤–æ–π –±–æ—Ç",
        user_id=user_id
    )
    
    if payment and payment.get("confirmation"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 150‚ÇΩ", 
                url=payment["confirmation"]["confirmation_url"]
            )],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu")]
        ])
        
        text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü (150‚ÇΩ)"
        await callback.message.edit_text(text, reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        users_data[user_id]["pending_payment"] = payment["id"]
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

@dp.callback_query(F.data == "pay_lifetime")
async def pay_lifetime(callback: types.CallbackQuery):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è lifetime –ø–ª–∞—Ç–µ–∂–∞ (500‚ÇΩ)
    pass

# Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
# –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ÆKassa
"""