#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
- –ù–æ–≤—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã (9-14, 15-19 –º–µ—Å—è—Ü–µ–≤)
- –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π
- –ü–æ–¥–ø–∏—Å–∫–∏ (150‚ÇΩ/–º–µ—Å—è—Ü, 500‚ÇΩ –Ω–∞–≤—Å–µ–≥–¥–∞)
- –ü—Ä–æ–º–æ–∫–æ–¥—ã
- –ù–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
"""
import asyncio
import logging
import json
import os
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π
try:
    from payment_integration import YookassaPayment
    if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
        payment_service = YookassaPayment(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
        logger.info("üí≥ –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
        PAYMENT_AVAILABLE = True
    else:
        payment_service = None
        logger.warning("‚ö†Ô∏è –ÆKassa –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        PAYMENT_AVAILABLE = False
except ImportError as e:
    payment_service = None
    PAYMENT_AVAILABLE = False
    logger.warning(f"‚ùå –ú–æ–¥—É–ª—å –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–æ–≤—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
AGES = {
    "9-14": "9-14 –º–µ—Å—è—Ü–µ–≤",
    "15-19": "15-19 –º–µ—Å—è—Ü–µ–≤"
}

# –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
PROMOCODES = [
    "MAMA2025", "BABY001", "SPEECH10", "RAZVIT20", "FREE100", "RODIT50", 
    "DETKI99", "MAMA123", "BABY456", "BEST001", "SUPER10", "GIFT777",
    "PROMO88", "MAMA321", "KIDS100", "LOVE555", "BABY777", "HAPPY99",
    "SMART10", "CLEVER5", "GROW123", "LEARN50", "PLAY789", "JOY2025",
    "SPEECH1", "WORDS99", "TALK123", "SPEAK50", "VOICE10", "SOUND77"
] + [f"CODE{i:03d}" for i in range(1, 71)]  # CODE001-CODE070 - –∏—Ç–æ–≥–æ 100 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        import json
        with open("users_data.json", "w", encoding="utf-8") as f:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            data_to_save = {}
            for user_id, data in users_data.items():
                data_copy = data.copy()
                if data_copy.get("registered"):
                    data_copy["registered"] = data_copy["registered"].isoformat()
                if data_copy.get("trial_started"):
                    data_copy["trial_started"] = data_copy["trial_started"].isoformat()
                if data_copy.get("last_task_date"):
                    data_copy["last_task_date"] = data_copy["last_task_date"].isoformat()
                data_to_save[str(user_id)] = data_copy
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        import json
        with open("users_data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            for user_id, user_data in data.items():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                if user_data.get("registered"):
                    user_data["registered"] = datetime.fromisoformat(user_data["registered"])
                if user_data.get("trial_started"):
                    user_data["trial_started"] = datetime.fromisoformat(user_data["trial_started"])
                if user_data.get("last_task_date"):
                    user_data["last_task_date"] = datetime.fromisoformat(user_data["last_task_date"]).date()
                users_data[int(user_id)] = user_data
            logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
    except FileNotFoundError:
        logger.info("üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_user_data()

def load_tasks_from_cms():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–∑ CMS"""
    try:
        import json
        with open("data/tasks.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            tasks = {}
            for task in data.get("tasks", []):
                age_group = task["age_group"]
                if age_group not in tasks:
                    tasks[age_group] = []
                tasks[age_group].append({
                    "day": task["day"],
                    "title": task["title"],
                    "text": task["description"],
                    "image": None
                })
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑ CMS: {sum(len(v) for v in tasks.values())}")
            return tasks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏–∑ CMS: {e}")
        return {}

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ CMS
TASKS_FROM_CMS = load_tasks_from_cms()

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ fallback
TASKS_FALLBACK = {
    "9-14": [
        {
            "day": 1,
            "title": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ 9-14 –º–µ—Å—è—Ü–µ–≤ - –î–µ–Ω—å 1",
            "text": """üß† **–í–Ω–∏–º–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ (—Å–ª—É—Ö):**
¬´–ß—Ç–æ –∑–∞ –∑–≤—É–∫?¬ª ‚Äî –±–µ—Ä—ë–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –∫—Ä—ã—à–∫—É, –ø–ª–∞—Å—Ç–∏–∫–æ–≤—É—é –∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—É—é –ª–æ–∂–∫—É. –ü–æ—Å—Ç—É—á–∏—Ç–µ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º: —Å—Ç–æ–ª, –ø–æ–ª, –∫–æ—Ä–æ–±–∫–∞. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
¬´–ó–≤–µ–Ω–∏—Ç!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –∫—Ä—ã—à–∫–µ),
¬´–ì–ª—É—Ö–æ!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –¥–∏–≤–∞–Ω—É),
¬´–°—Ç—É–∫-—Å—Ç—É–∫!¬ª ‚Äî (–ª–æ–∂–∫–∞ –ø–æ –ø–æ–ª—É).
‚û°Ô∏è –ü–æ–±—É–∂–¥–∞–µ–º –º–∞–ª—ã—à–∞ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å –∑–≤—É–∫–∏.

ü§∏ **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
¬´–°–æ–±–µ—Ä–∏ –∑–≤–µ—Ä–µ–π¬ª ‚Äî —Ä–∞–∑–ª–æ–∂–∏—Ç–µ –º—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏ –∑–º–µ–π–∫–æ–π. –ì–æ–≤–æ—Ä–∏—Ç–µ: ¬´–í–æ—Ç –ª–∏—Å–∏—á–∫–∞! –ê –≤–æ—Ç –∑–∞–π–∫–∞!¬ª ‚Äî –º–∞–ª—ã—à –ø–æ–ª–∑—ë—Ç –∏–ª–∏ –∏–¥—ë—Ç –ø–æ –º–∞—Ä—à—Ä—É—Ç—É, —Å–æ–±–∏—Ä–∞—è –∏—Ö –≤ –∫–æ—Ä–æ–±–∫—É.
‚û°Ô∏è –£–∫—Ä–µ–ø–ª—è–µ–º –º–æ—Ç–æ—Ä–∏–∫—É, –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–≤.

üó£Ô∏è **–ü—Ä–µ–¥—Ä–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
¬´–ú—è—á –∏ –∑–≤—É–∫¬ª ‚Äî –æ—Ç–±–∏–≤–∞–π—Ç–µ –º—è—á–∏–∫ –æ—Ç –ø–æ–ª–∞ –∏–ª–∏ —Å—Ç–æ–ª–∞ –∏ —Ä–∏—Ç–º–∏—á–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ:
¬´–ë—É—Ö¬ª ‚Üí –æ—Ç—Å–∫–æ–∫,
¬´–ë—É—Ö¬ª ‚Üí –æ—Ç—Å–∫–æ–∫,
‚û°Ô∏è –ü–æ–±—É–∂–¥–∞–µ–º –º–∞–ª—ã—à–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∏ –ø–æ–æ—â—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏.

üòä **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
¬´–ì—Ä—É—Å—Ç—å ‚Äî —Ä–∞–¥–æ—Å—Ç—å¬ª ‚Äî —Å –º—è–≥–∫–æ–π –∏–≥—Ä—É—à–∫–æ–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-—Å—Ü–µ–Ω–∫–∏:
¬´–û–π-–æ–π, –∑–∞–π–∫–∞ —É–ø–∞–ª‚Ä¶¬ª (–≥—Ä—É—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å)
‚Üí ¬´–£—Ä–∞! –ó–∞–π–∫–∞ –≤—Å—Ç–∞–ª!¬ª (–≤–µ—Å—ë–ª—ã–π –≥–æ–ª–æ—Å, —Ö–ª–æ–ø–∞–µ–º –≤ –ª–∞–¥–æ—à–∏)
‚û°Ô∏è –ü–æ–º–æ–≥–∞–µ–º —Ä–µ–±—ë–Ω–∫—É —Ä–∞–∑–ª–∏—á–∞—Ç—å —ç–º–æ—Ü–∏–∏, —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, –ø–æ–¥—Ä–∞–∂–∞—Ç—å.

‚úã **–¢–∞–∫—Ç–∏–ª—å–Ω–æ–µ/–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
¬´–ú—è–≥–∫–æ –∏–ª–∏ –∂—ë—Å—Ç–∫–æ¬ª ‚Äî –≤ –æ–¥–Ω–æ–π –º–∏—Å–∫–µ –ø–æ–ª–æ–∂–∏—Ç–µ –≤–∞—Ç—É, —Ç—Ä—è–ø–æ—á–∫—É, –ø–æ–º–ø–æ–Ω. –í –¥—Ä—É–≥–æ–π ‚Äî –ª–æ–∂–∫—É, –ø—É–≥–æ–≤–∏—Ü—ã, –∫—Ä—ã—à–∫—É. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –º–∞–ª—ã—à—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–æ–≥–∞—Ç—å –∏ –Ω–∞–∑—ã–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏—è:
¬´–ú—è–≥–∫–æ!¬ª ‚Äî (—Ç—Ä–æ–≥–∞–µ—Ç –≤–∞—Ç—É),
¬´–¢–≤—ë—Ä–¥–æ!¬ª ‚Äî (—Ç—Ä–æ–≥–∞–µ—Ç –ª–æ–∂–∫—É).
‚û°Ô∏è –†–∞–∑–≤–∏–≤–∞–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–ª–æ–≤–∞—Ä—å.""",
            "image": None
        }
    ],
    "15-19": [
        {
            "day": 1,
            "title": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ 15-19 –º–µ—Å—è—Ü–µ–≤ - –î–µ–Ω—å 1", 
            "text": """üß† **–í–Ω–∏–º–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ:**
–ò–≥—Ä–∞ ¬´–ü–æ–∫–∞–∂–∏ –∏ –Ω–∞–∑–æ–≤–∏¬ª ‚Äî —Ä–∞–∑–ª–æ–∂–∏—Ç–µ –ø–µ—Ä–µ–¥ —Ä–µ–±—ë–Ω–∫–æ–º 4‚Äì5 –∑–Ω–∞–∫–æ–º—ã—Ö –∏–≥—Ä—É—à–µ–∫. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ: ¬´–ì–¥–µ –º–∞—à–∏–Ω–∫–∞?¬ª, ¬´–ü–æ–∫–∞–∂–∏ –º–∏—à–∫—É¬ª, ¬´–ê –≥–¥–µ –ª–æ—à–∞–¥–∫–∞?¬ª ‚Äî –ø–æ–æ—â—Ä—è–π—Ç–µ, –µ—Å–ª–∏ –º–∞–ª—ã—à —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

ü§∏ **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
–ò–≥—Ä–∞ —Å –º—è—á–æ–º ‚Äî –∫–∞—Ç–∞–π—Ç–µ –º—è—á–∏–∫ –¥—Ä—É–≥ –¥—Ä—É–≥—É. –ü—Ä–∏ —ç—Ç–æ–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–æ–≤–∞–º–∏: ¬´–ö–∞—Ç–∏!¬ª, ¬´–ü–æ–π–º–∞–ª!¬ª, ¬´–ë—Ä–æ—Å–∞–π!¬ª ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≥–ª–∞–≥–æ–ª—ã –∏ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞.

üó£Ô∏è **–ü—Ä–µ–¥—Ä–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
–ß–∏—Ç–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏—à–∫–∏, –¥–µ–ª–∞—è –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É–¥–∞—Ä–Ω—ã—Ö –∑–≤—É–∫–∞—Ö, —Ä–∏—Ç–º–µ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö:

–ó–∞–π–∫–∞ –≤–∑—è–ª —Å–≤–æ–π –±–∞—Ä–∞–±–∞–Ω ‚Äî
–ò —É–¥–∞—Ä–∏–ª: —Ç—Ä–∞–º-—Ç–∞–º-—Ç–∞–º!

–ö—É-–∫—É, –∫—É-–∫—É, –∫—É–∫—É—à–µ—á–∫–∞,
–õ–µ—Ç–∏ —Å–∫–æ—Ä–µ–π –≤ –ª–µ—Å–æ–∫.
–ö—É-–∫—É, –∫—É-–∫—É, –∫—É–∫—É—à–µ—á–∫–∞,
–ü–æ–¥–∞–π —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–∫!

–¢—É–∫-—Ç—É–∫-—Ç—É–∫-—Ç—É–∫ ‚Äî
–≠—Ç–æ —á—Ç–æ –∑–∞ —Å—Ç—É–∫?
–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —ç—Ç–æ –∑–≤—É–∫:
–¢—É–∫-—Ç—É–∫-—Ç—É–∫-—Ç—É–∫.

üòä **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
¬´–ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏¬ª ‚Äî —Å—è–¥—å—Ç–µ —Å –º–∞–ª—ã—à–æ–º –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º –∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏–∑–æ–±—Ä–∞–∂–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏: —Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —É–¥–∏–≤–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞—Ö, –≤–µ—Å–µ–ª—å–µ. –ü–æ–±—É–∂–¥–∞–π—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –º–∏–º–∏–∫—É: ¬´–ê —Ç–µ–ø–µ—Ä—å –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –∏—Å–ø—É–≥–∞–ª—Å—è!¬ª

‚úã **–¢–∞–∫—Ç–∏–ª—å–Ω–æ–µ/–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
¬´–ö–æ—Ä–∑–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä¬ª ‚Äî –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É —Ä–∞–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ (–º–µ—à–æ—á–µ–∫ —Å —Ñ–∞—Å–æ–ª—å—é, –∫—É—Å–æ—á–µ–∫ –≥—É–±–∫–∏, —Ñ–æ–ª—å–≥–∞, –º–µ—Ö, –±–∞—Ä—Ö–∞—Ç). –ü—É—Å—Ç—å –º–∞–ª—ã—à –æ—â—É–ø—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã, –∞ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –æ—â—É—â–µ–Ω–∏—è: ¬´–ú—è–≥–∫–∏–π¬ª, ¬´–®—É—Ä—à–∏—Ç¬ª, ¬´–ì–ª–∞–¥–∫–∏–π¬ª, ¬´–ö–æ–ª—é—á–∏–π¬ª.""",
            "image": None
        }
    ]
}

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ CMS, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
TASKS = TASKS_FROM_CMS if TASKS_FROM_CMS else TASKS_FALLBACK

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

async def send_daily_tasks():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ"""
    logger.info("üïò –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π...")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ CMS –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    global TASKS
    fresh_tasks = load_tasks_from_cms()
    if fresh_tasks:
        TASKS = fresh_tasks
        logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –∏–∑ CMS: {sum(len(v) for v in TASKS.values())}")
    
    sent_count = 0
    try:
        for user_id, user_data in users_data.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            if not has_subscription(user_data):
                continue
                
            age_group = user_data.get("age_group")
            if not age_group or age_group not in TASKS:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –∑–∞–¥–∞–Ω–∏—è
            trial_start = user_data.get("trial_started")
            if trial_start:
                days_since_start = (datetime.now() - trial_start).days
                day_number = (days_since_start % len(TASKS[age_group])) + 1
            else:
                day_number = 1
            
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ –¥–Ω—é
            task_index = day_number - 1
            if task_index >= len(TASKS[age_group]):
                task_index = 0
            task = TASKS[age_group][task_index]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            text = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —Ç–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task['text']}"
            
            try:
                await bot.send_message(user_id, text)
                sent_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                user_data["last_task_date"] = datetime.now().date()
                save_user_data()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
    
    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {sent_count}")

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
    scheduler.add_job(
        send_daily_tasks,
        CronTrigger(hour=6, minute=0, timezone="UTC"),  # 9:00 MSK = 6:00 UTC
        id='daily_tasks',
        replace_existing=True
    )
    scheduler.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 9:00 –ú–°–ö)")

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_data:
        users_data[user_id] = {
            "registered": datetime.now(),
            "age_group": None,
            "trial_started": None,
            "trial_used": False,
            "subscription": None,  # "monthly", "lifetime", "promocode"
            "last_task_date": None,
            "current_day": 0
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_data()
    return users_data[user_id]

def is_trial_active(user_data):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    if not user_data["trial_started"] or user_data["subscription"]:
        return False
    trial_end = user_data["trial_started"] + timedelta(days=7)
    return datetime.now() < trial_end

def get_age_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    buttons = []
    for code, name in AGES.items():
        buttons.append([InlineKeyboardButton(text=f"üë∂ {name}", callback_data=f"age_{code}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ /start
WELCOME_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã

–Ø –Ω–µ –ª–æ–≥–æ–ø–µ–¥. –Ø –ø—Ä–æ—Å—Ç–æ –º–∞–º–∞, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç–∞–ª–∞ –∏—Å–∫–∞—Ç—å –ø–æ –∫—É—Å–æ—á–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ—á–∏. –•–æ—Ç–µ–ª–æ—Å—å —á–µ–≥–æ-—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏ —Ä—è–¥–æ–º ‚Äî –ø—Ä—è–º–æ –≤ Telegram. –¢–∞–∫ —Ä–æ–¥–∏–ª—Å—è —ç—Ç–æ—Ç –±–æ—Ç.

–ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."""

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    welcome_text = """–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –∏—Å–∫–∞—Ç—å.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å Telegram ‚Äî –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞–µ—à—å –≥–æ—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

üë∂ –§–æ—Ä–º–∞—Ç: 5 –º–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî —Å–µ–Ω—Å–æ—Ä–∏–∫–∞, —Ä–µ—á—å, –¥–≤–∏–∂–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–∏ –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å
üß∫ –ë–µ–∑ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –¥–µ–≤–∞–π—Å–æ–≤ ‚Äî –≤—Å—ë –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    
    await message.answer(welcome_text)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    await asyncio.sleep(1)
    
    text = """üéâ –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü—Ä–æ–±—É–π, –∏–≥—Ä–∞–π, —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –º–∞–ª—ã—à.

–î–∞–ª—å—à–µ –±—É–¥–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã:
‚Ä¢ 150 ‚ÇΩ –≤ –º–µ—Å—è—Ü
‚Ä¢ –∏–ª–∏ 500 ‚ÇΩ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ (–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç)

–≠—Ç–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ—Ç –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üôå

‚ÑπÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.
–ü–æ—Å–ª–µ –µ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–Ω–∏–º–∞—é ü§ù", callback_data="show_age_selection")],
        [InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")]
    ])
    
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "show_age_selection")
async def show_age_selection(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    text = """–í—ã–±–∏—Ä–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –∏ —è –ø—Ä–∏—à–ª—é –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ üíõ"""
    
    keyboard = get_age_keyboard()
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("age_"))
async def select_age(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    age_code = callback.data.split("_")[1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
    user_data["age_group"] = age_code
    
    if not user_data["trial_started"]:
        user_data["trial_started"] = datetime.now()
        user_data["trial_used"] = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_user_data()
    
    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç {age_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await send_daily_task(callback.message, user_id)
    await callback.answer()

@dp.callback_query(F.data == "change_age")
async def change_age(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"""
    text = """–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –∏—Å–∫–∞—Ç—å.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å Telegram ‚Äî –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞–µ—à—å –≥–æ—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

üë∂ –§–æ—Ä–º–∞—Ç: 5 –º–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî —Å–µ–Ω—Å–æ—Ä–∏–∫–∞, —Ä–µ—á—å, –¥–≤–∏–∂–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–∏ –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å
üß∫ –ë–µ–∑ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –¥–µ–≤–∞–π—Å–æ–≤ ‚Äî –≤—Å—ë –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤

–í—ã–±–∏—Ä–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –∏ —è –ø—Ä–∏—à–ª—é –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ üíõ"""
    
    keyboard = get_age_keyboard()
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()



@dp.callback_query(F.data == "promocode")
async def enter_promocode(callback: types.CallbackQuery):
    """–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    text = "üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
    
    await callback.message.answer(text)
    await callback.answer()
    
    # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥
    users_data[callback.from_user.id]["waiting_promocode"] = True

@dp.message()
async def handle_promocode(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data.get("waiting_promocode"):
        user_data["waiting_promocode"] = False
        code = message.text.strip().upper()
        
        if code in PROMOCODES:
            user_data["subscription"] = "promocode"
            await message.answer("üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            await send_daily_task(message, user_id)
        else:
            text = "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (150 ‚ÇΩ)", callback_data="pay_monthly")],
                [InlineKeyboardButton(text="üíé –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞ (500 ‚ÇΩ)", callback_data="pay_lifetime")],
                [InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")]
            ])
            await message.answer(text, reply_markup=keyboard)

async def send_daily_task(message, user_id, repeat_task=False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    user_data = get_user_data(user_id)
    age_group = user_data.get("age_group")
    
    logger.info(f"üîç send_daily_task: user={user_id}, age_group={age_group}, TASKS keys={list(TASKS.keys())}")
    
    if not age_group:
        await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
        
    if age_group not in TASKS:
        await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age_group} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not is_trial_active(user_data) and not user_data["subscription"]:
        # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        text = """–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (150 ‚ÇΩ)", callback_data="pay_monthly")],
            [InlineKeyboardButton(text="üíé –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞ (500 ‚ÇΩ)", callback_data="pay_lifetime")],
            [InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    trial_start = user_data.get("trial_started")
    if trial_start:
        days_since_start = (datetime.now() - trial_start).days
        day_number = (days_since_start % len(TASKS[age_group])) + 1
    else:
        day_number = 1
    
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ –¥–Ω—é
    task_index = day_number - 1
    if task_index >= len(TASKS[age_group]):
        task_index = 0
    task = TASKS[age_group][task_index]
    
    # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
    prefix = ""
    if repeat_task:
        prefix = "üïò –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–ø–∞–¥—É—Ç –≤ –±–æ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 9 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ.\n\n"
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if task['text'].startswith('üìã –ó–∞–¥–∞–Ω–∏–µ'):
        text = f"{prefix}{task['text']}"
    else:
        # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"""{prefix}üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {AGES[age_group]}:

{task['text']}

üí° –°–æ–≤–µ—Ç: –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–æ –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞–π—Ç–µ. –ï—Å–ª–∏ –º–∞–ª—ã—à –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

‚ú® –•–≤–∞–ª–∏—Ç–µ –∑–∞ –ª—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏!

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º! üåô"""

    # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(text, reply_markup=keyboard)
    
    user_data["last_task_date"] = datetime.now().date()
    save_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–¥–∞–Ω–∏—è

@dp.callback_query(F.data == "get_task")
async def get_task_callback(callback: types.CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    if not user_data.get("age_group"):
        text = "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞ üë∂"
        keyboard = get_age_keyboard()
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        return
    
    await send_daily_task(callback.message, user_id, repeat_task=True)
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    age_group = user_data.get('age_group')
    logger.info(f"üîç main_menu: user={user_id}, age_group={age_group}, user_data={user_data}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")],
        [InlineKeyboardButton(text="üë∂ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="menu_change_age")]
    ])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
    age_display = AGES.get(age_group, '–ù–µ –≤—ã–±—Ä–∞–Ω') if age_group else '–ù–µ –≤—ã–±—Ä–∞–Ω'
    
    text = f"""üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í–æ–∑—Ä–∞—Å—Ç: {age_display}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()



@dp.callback_query(F.data == "menu_change_age")
async def menu_change_age(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –º–µ–Ω—é"""
    user_data = get_user_data(callback.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if user_data.get("trial_started") and not user_data.get("subscription"):
        text = """üîí –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≤–æ–∑—Ä–∞—Å—Ç.
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥—Ä—É–≥–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,
–æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:
‚Äì –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (150 ‚ÇΩ)
‚Äì –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞ (500 ‚ÇΩ)"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (150 ‚ÇΩ)", callback_data="pay_monthly")],
            [InlineKeyboardButton(text="üíé –î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞ (500 ‚ÇΩ)", callback_data="pay_lifetime")]
        ])
        
        await callback.message.answer(text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        text = """–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –∏—Å–∫–∞—Ç—å.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å Telegram ‚Äî –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞–µ—à—å –≥–æ—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

üë∂ –§–æ—Ä–º–∞—Ç: 5 –º–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî —Å–µ–Ω—Å–æ—Ä–∏–∫–∞, —Ä–µ—á—å, –¥–≤–∏–∂–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–∏ –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å
üß∫ –ë–µ–∑ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –¥–µ–≤–∞–π—Å–æ–≤ ‚Äî –≤—Å—ë –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤

–í—ã–±–∏—Ä–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –∏ —è –ø—Ä–∏—à–ª—é –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ üíõ"""
        
        keyboard = get_age_keyboard()
        await callback.message.answer(text, reply_markup=keyboard)
    
    await callback.answer()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ===

@dp.callback_query(F.data == "pay_monthly")
async def pay_monthly(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    
    if not PAYMENT_AVAILABLE:
        await callback.answer("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    payment = payment_service.create_payment(
        amount=150.0,
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - –†–µ—á–µ–≤–æ–π –±–æ—Ç –¥–ª—è –¥–µ—Ç–µ–π",
        user_id=user_id,
        return_url="https://t.me/SpeechStarBot"
    )
    
    if payment and payment.get("confirmation"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        user_data = get_user_data(user_id)
        user_data["pending_payment"] = {
            "payment_id": payment["id"],
            "type": "monthly",
            "amount": 150.0
        }
        save_user_data()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 150‚ÇΩ", 
                url=payment["confirmation"]["confirmation_url"]
            )],
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        text = """üí≥ **–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞** - 150‚ÇΩ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—è–º –Ω–∞ –º–µ—Å—è—Ü.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"."""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "pay_lifetime")
async def pay_lifetime(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    
    if not PAYMENT_AVAILABLE:
        await callback.answer("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    payment = payment_service.create_payment(
        amount=500.0,
        description="–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø - –†–µ—á–µ–≤–æ–π –±–æ—Ç –¥–ª—è –¥–µ—Ç–µ–π",
        user_id=user_id,
        return_url="https://t.me/SpeechStarBot"
    )
    
    if payment and payment.get("confirmation"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        user_data = get_user_data(user_id)
        user_data["pending_payment"] = {
            "payment_id": payment["id"],
            "type": "lifetime",
            "amount": 500.0
        }
        save_user_data()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üíé –û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ", 
                url=payment["confirmation"]["confirmation_url"]
            )],
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        text = """üíé **–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø** - 500‚ÇΩ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—è–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"."""
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "check_payment")
async def check_payment(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = callback.from_user.id
    user_data = get_user_data(user_id)
    
    pending_payment = user_data.get("pending_payment")
    if not pending_payment:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if not PAYMENT_AVAILABLE:
        await callback.answer("üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
    payment_status = payment_service.check_payment_status(pending_payment["payment_id"])
    
    if payment_status and payment_status.get("status") == "succeeded":
        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if pending_payment["type"] == "monthly":
            user_data["subscription"] = "monthly"
            user_data["subscription_end"] = (datetime.now() + timedelta(days=30)).isoformat()
            await callback.answer("üéâ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        elif pending_payment["type"] == "lifetime":
            user_data["subscription"] = "lifetime"
            await callback.answer("üéâ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        del user_data["pending_payment"]
        save_user_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        text = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—è–º. –í–æ—Ç –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:"
        await callback.message.edit_text(text)
        await send_daily_task(callback.message, user_id)
        
    elif payment_status and payment_status.get("status") == "canceled":
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    logger.info(f"‚ö° –í–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(AGES)}")
    logger.info(f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(PROMOCODES)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    start_scheduler()
    
    logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    
    try:
        await dp.start_polling(bot, skip_updates=True, handle_signals=False)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if scheduler.running:
            scheduler.shutdown()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())