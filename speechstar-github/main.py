#!/usr/bin/env python3
"""
Main entry point - Flask web + embedded Telegram bot
"""
import os
import sys
import logging
import threading
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
sys.path.insert(0, os.getcwd())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('main')

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from app import app

# –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
bot_status = {"running": False, "started_at": None}

@app.route('/bot-status')
def bot_status_endpoint():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    from flask import jsonify
    return jsonify(bot_status)

@app.route('/uptime')
def uptime_endpoint():
    """Uptime endpoint –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤"""
    from flask import jsonify
    import os
    return jsonify({
        "status": "alive",
        "bot_running": bot_status["running"],
        "timestamp": datetime.now().isoformat(),
        "uptime_url": f"https://{os.environ.get('REPL_SLUG', 'unknown')}.{os.environ.get('REPL_OWNER', 'unknown')}.repl.co/uptime"
    })

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_status
    
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not os.environ.get("BOT_TOKEN"):
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        import subprocess
        result = subprocess.run(['pgrep', '-f', 'python.*bot'], capture_output=True)
        if result.returncode == 0:
            logger.warning("‚ö†Ô∏è –î—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
            
        bot_status["running"] = True
        bot_status["started_at"] = datetime.now().isoformat()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        from new_bot import main as bot_main
        
        # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        loop.run_until_complete(bot_main())
        
    except Exception as e:
        bot_status["running"] = False
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    bot_thread = threading.Thread(target=run_telegram_bot, daemon=True)
    bot_thread.start()
    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# This is the entry point for gunicorn
# Use: gunicorn --bind 0.0.0.0:5000 main:app
